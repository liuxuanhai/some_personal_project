         /***************************************************/
         /************                        ***************/
         /************      直线裁剪－        ***************/
         /************        梁永栋算法      ***************/
         /***************************************************/
已知如下程序裁剪编码：
/*                   ｜          ｜
**              1001 ｜  1000    ｜1010
**             ―――｜―――――｜―――
**                   ｜          ｜
**                   ｜          ｜
**              0001 ｜  0000    ｜0010
**                   ｜          ｜
**                   ｜          ｜
**             ―――｜―――――｜―――
**              0101 ｜   0100   ｜0110      */
算法思想如下：
 1. 线段交点的参数初始化为u1=0,u2=1。
 2. 计算出各个裁剪边界的p，q值，用p，q来判断是舍弃线段还是改变交点的参数。
    当p<0时，参数r=q/p 用于更新u1；
    当p>0时，参数r=q/p 用于更新u2；
    如果更新了u1和u2后，使u1>u2，则舍弃该线段。否则，更新适当的u 参数是
    新值仅仅缩短了线段。
 3. 当p=0且q<0时，舍弃该线段，因为平行于边界并且位于边界之外。
    p，q的四个值经过测试后，该线段未被舍弃，则裁剪线段的端点有u1，u2决定。


C源程序：
#include<graphics.h>
#include<stdio.h>
int clip(p,q,u1,u2)
float p,q,*u1,*u2;
{
  float r;
  if(p<0.0)
    {
      r=q/p;
      if(r>*u2)return 0;
       else
	if(r>*u1)
	  {
	    *u1=r;  /*u1取0和r之间的最大值*/
	    return 1;
	  }
    }
	else
	 if(p>0.0)
	   {
	    r=q/p;
	    if(r<*u1)return 0;
	     else
	       if(r<*u2)
		{
		 *u2=r;/*u2取1和r之间的最小值*/
		 return 1;
		}
	   }
	   else
	     if(q<0)return 0;/*线段平行边界，舍弃*/
	     return 1;
}
main()
{
  float x1=80,y1=150,x2=420,y2=350,xl=100,xr=400,yb=100,yt=400;
  float dx,dy,u1,u2;
  int gdriver=DETECT,gmode;
  initgraph(&gdriver,&gmode,"");
  u1=0;u2=1;
  dx=x2-x1;
  line(80,150,420,350);
  rectangle(100,100,400,400);
  getch();
  cleardevice();
  rectangle(100,100,400,400);
  if(clip(-dx,x1-xl,&u1,&u2))
    if(clip(dx,xr-x1,&u1,&u2))
     {
      dy=y2-y1;
	if(clip(-dy,y1-yb,&u1,&u2))
	 if(clip(dy,yt-y1,&u1,&u2))
	  {
	   if(u2<1.0)
	    {
	     x2=x1+u2*dx;y2=y1+u2*dy;
	    }
	   if(u1>0.0)
	    {
	     x1+=u1*dx;y1+=u1*dy;
	    }
	    setcolor(2);
	    line(x1,y1,x2,y2);
	    getch();
	    /*printf("%f,%f,%f,%f",x1,y1,x2,y2);*/
	  }
      }
      getch();
      closegraph();
}