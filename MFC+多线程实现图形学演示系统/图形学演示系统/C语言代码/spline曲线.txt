/********************************************************************/
/*     算法步骤:                                                     */
/*     ①根据给出的样本点x(i),y(i)计算边界条件系数r(i),t(i)            */
/*     ②在边界条件下求c(1),c(2)......c(n)                            */
/*     ③计算个子区间[x(i),x(i+1)]上各点的函数值然后用画线函数绘出      */
/*                    具体过程请参考计算方法                          */                                          */
/********************************************************************/
#include<stdio.h>
#include<graphics.h>
main()
{
    int x[7]={0,150,260,370,450,520,600};
    int y[7]={0,80,120,20,60,100,50};
    int gdriver=DETECT,gmode;
    initgraph(&gdriver,&gmode,"");
    Wbox(x,y,6);
    spline(x,y,7,3);
    getch();
    closegraph();
}
spline(x,y,n,color)
int x[],y[],n,color;
{
   float a[50],b[50],r[50],t[50],c[50],h[50],u2,u3,v2,v3;
   register int i,x0,y0,x1,y1,j;
   for(i=0;i<n-1;++i)
      h[i]=(float)(x[i+1]-x[i]);
   r[0]=1.0;
   r[n-1]=0.0;
   t[0]=(float)(y[1]-y[0])*3.0/h[0];
   t[n-1]=(float)(y[n-1]-y[n-2])*3.0/h[n-2];
   for(i=1;i<n-1;++i)
      {
         r[i]=h[i-1]/(h[i-1]+h[i]);
         t[i]=3.0*((1-r[i])*(float)(y[i]-y[i-1])/h[i-1]+r[i]*(float)(y[i+1]-y[i])/h[i]);
       }
   a[0]=-r[0]/2.0;
   b[0]=t[0]/2.0;
   for(i=1;i<n;++i)
      {
        a[i]=-r[i]/(2.0+(1.0-r[i])*a[i-1]);
        b[i]=(t[i]-(1.0-r[i])*b[i-1])/(2.0+(1.0-r[i])*a[i-1]);
      }
   c[n-1]=b[n-1];
   for(i=1;i<n;++i)
       {
	 j=n-1-i;
         c[j]=a[j]*c[j+1]+b[j];
       }
   for(i=0;i<n-1;++i)
       {
	 if(x[i]+1>=x[i+1])
	   {
	     setcolor(color);
	     line(x[i],y[i],x[i+1],y[i+1]);
	   }
          else
            {
               x0=x[i];
               y0=y[i];
               for(j=x[i]+1;j<=x[i+1];++j)
                  {
                     u2=((float)(x[i+1]-j)/h[i])*((float)(x[i+1]-j)/h[i]);
                     u3=u2*((float)(x[i+1]-j)/h[i]);
                     v2=((float)(j-x[i])/h[i])*((float)(j-x[i])/h[i]);
                     v3=v2*((float)(j-x[i])/h[i]);
                     y1=(int)((3.0*u2-2.0*u3)*y[i]+(3.0*v2-2.0*v3)*y[i+1]
                            +h[i]*c[i]*(u2-u3)-h[i]*c[i+1]*(v2-v3));
   		     x1=j;
		     setcolor(color);
	             line(x0,y0,x1,y1);
                     x0=x1;
                     y0=y1;
                  }
             }
         }
}
 Wbox(x,y,n)
int x[],y[],n;
{
   int i;
   for(i=0;i<n;++i)
      {
         putpixel((x[i]-1),(y[i]-1),6);
         putpixel((x[i]-1),y[i],6);
         putpixel(x[i]-1,y[i]+1,6);
         putpixel(x[i],y[i]-1,6);
         putpixel(x[i],y[i]+1,6);
         putpixel(x[i]+1,y[i]-1,6);
         putpixel(x[i]+1,y[i],6);
         putpixel(x[i]+1,y[i]+1,6);
      }
}