/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.struts.action;

import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.pojo.Goodinfo;
import com.pojo.Goodorder;
import com.pojo.Goodorderinfo;
import com.pojo.Viewspot;
import com.service.GoodinfoService;
import com.struts.form.GoodinfoForm;
import com.struts.form.ViewspotForm;
import com.util.StringUtil;

/** 
 * MyEclipse Struts
 * Creation date: 04-17-2016
 * 
 * XDoclet definition:
 * @struts.action path="/goodinfo" name="goodinfoForm" input="/form/goodinfo.jsp" scope="request" validate="true"
 */
public class GoodinfoAction extends DispatchAction {
	// 依赖注入 GoodinfoService
	private GoodinfoService goodinfoService;

	public GoodinfoService getGoodinfoService() {
		return goodinfoService;
	}

	public void setGoodinfoService(GoodinfoService goodinfoService) {
		this.goodinfoService = goodinfoService;
	}
	
	
	// 通过action  method方式删除用户
	public ActionForward goodinfoDeleteExecute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		String goodinfoid=request.getParameter("goodinfoid");
		Goodinfo user=new Goodinfo();
		user.setGoodid(Integer.parseInt(goodinfoid));
		goodinfoService.goodinfoDelete(user);
		request.getSession().setAttribute("goodinfolist",goodinfoService.goodinfoLikeNameOrId(""));  //设置session
		return mapping.findForward("goodinfoMana");  //成功
	}
	
	// 通过action  method方式修改用户之前
	public ActionForward goodinfoBeforeModifyExecute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		String goodinfoid=request.getParameter("goodinfoid");
		Goodinfo user=goodinfoService.goodinfoByID(Integer.parseInt(goodinfoid));
		request.getSession().setAttribute("goodinfomodifyinfo",user);  //设置session
		return mapping.findForward("goodinfoBeforeModify");  //成功
	}
	
	// 通过action  method方式  获取所有用户
	public ActionForward goodinfoFindExecute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		//decode一次
		String nameorid=request.getParameter("goodinfofindnfo");
		if(nameorid!=null)
			nameorid=URLDecoder.decode(nameorid,"UTF-8");
		else
			nameorid="";
		request.getSession().setAttribute("goodinfolist",goodinfoService.goodinfoLikeNameOrId(nameorid));  //设置session
		return mapping.findForward("goodinfoMana");  //成功
	}
	
	//goodinfoListExecute
	// 通过action  method方式  获取所有用户
	public ActionForward goodinfoListExecute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		//decode一次
		String findinfo=request.getParameter("findinfo");
		if(findinfo!=null)
			findinfo=URLDecoder.decode(findinfo,"UTF-8");
		else
			findinfo="";
		String typeid=request.getParameter("typeid");
		if(typeid!=null)
			typeid=URLDecoder.decode(typeid,"UTF-8");
		else
			typeid="";
		request.getSession().setAttribute("findinfo",findinfo);
		request.getSession().setAttribute("typeid",typeid);
		request.getSession().setAttribute("goodinfolist",goodinfoService.goodinfoLikeNameOrId(findinfo,typeid));  //设置session
		request.getSession().setAttribute("typelist",goodinfoService.findAllGoodType());
		return mapping.findForward("goodinfoListMana");  //成功
	}
	
	//查看单个景点信息
	public ActionForward goodinfoLookExecute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		//decode一次
		String id=request.getParameter("goodid");
		//System.out.println(spotid);
		Goodinfo goodinfoinfo=goodinfoService.goodinfoByID(new Integer(id));
		request.getSession().setAttribute("goodinfoinfo",goodinfoinfo);  //设置session 
		request.getSession().setAttribute("goodinfocomment",goodinfoService.getGoodcommentByGoodid(goodinfoinfo.getGoodid().toString()));  //设置session
		return mapping.findForward("goodinfoInfoMana");  //成功
	}
	
	//加入购物车
	public ActionForward goodinfoAddtoCartExecute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		//decode一次
		String goodid=request.getParameter("goodid");
		String goodname=request.getParameter("goodname");
		if(goodname==null)goodname="";
		else
			goodname=URLDecoder.decode(goodname,"UTF-8");
		String goodprice=request.getParameter("goodprice");
		String nums=request.getParameter("nums");
		
		// 更新购物车
		List<Object[]> cart=(List<Object[]>) request.getSession().getAttribute("cart");  // 获得购物车
		if(cart==null)
			cart=new ArrayList<Object[]>();
		Object[] obj=new Object[4];
		obj[0]=goodid;obj[1]=goodname;obj[2]=Double.valueOf(goodprice);obj[3]=new Integer(nums);
		int i=0;
		for(i=0;i<cart.size();++i)
			if(cart.get(i)[0].toString().equals(obj[0].toString()))
				break;
		if(i<cart.size())
		{
			cart.get(i)[3]=new Integer((Integer) obj[3])+new Integer((Integer) cart.get(i)[3]);
		}else
			cart.add(obj);
		request.getSession().setAttribute("cart", cart);
		//System.out.print(obj[0].toString()+obj[1]+obj[2]+obj[3]);
		//返回
		Goodinfo goodinfoinfo=goodinfoService.goodinfoByID(new Integer(goodid));
		request.getSession().setAttribute("goodinfoinfo",goodinfoinfo);  //设置session 
		request.getSession().setAttribute("goodinfocomment",goodinfoService.getGoodcommentByGoodid(goodinfoinfo.getGoodid().toString()));  //设置session
		return mapping.findForward("goodinfoInfoMana");  //成功
	}
	
	//submitgoodorderExecute下单
	//加入购物车
	public ActionForward submitgoodorderExecute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		//decode一次
		String username=request.getParameter("username");
		String ordertotalprice=request.getParameter("ordertotalprice");
		String ordername=request.getParameter("ordername");
		if(ordername!=null)
		ordername=URLDecoder.decode(ordername,"UTF-8");
		String orderaddr=request.getParameter("orderaddr");
		if(orderaddr!=null)
			orderaddr=URLDecoder.decode(orderaddr,"UTF-8");
		String orderphone=request.getParameter("orderphone");
		Goodorder order=new Goodorder();
		order.setAddr(orderaddr);order.setName(ordername);order.setOrderstatus("0");order.setOrdertime(StringUtil.getTimestampFromDate(new Date()));
		order.setPhone(orderphone);order.setUsername(username);order.setTotalprice(Double.valueOf(ordertotalprice));
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		String ordernum = sdf.format(new Date());
		order.setOrderid(ordernum);
		goodinfoService.goodorderAdd(order);
		
		// 更新购物车
		List<Object[]> cart=(List<Object[]>) request.getSession().getAttribute("cart");  // 获得购物车
		if(cart==null)
			cart=new ArrayList<Object[]>();
		int i=0;
		for(i=0;i<cart.size();++i)
		{
			Goodorderinfo orderinfo=new Goodorderinfo();
			orderinfo.setGoodid(new Integer(cart.get(i)[0].toString()));
			orderinfo.setGoodname((String) cart.get(i)[1]);
			orderinfo.setGoodprice(Double.valueOf(cart.get(i)[2].toString()));
			orderinfo.setNums(new Integer(cart.get(i)[3].toString()));
			orderinfo.setTotalprice((orderinfo.getGoodprice()*orderinfo.getNums()));
			orderinfo.setOrderid(ordernum);
			goodinfoService.goodorderinfoAdd(orderinfo);
		}
		cart.clear();
		request.getSession().setAttribute("cart", cart);
		return mapping.findForward("goodinfoShoppingCartMana");  //成功
	}
}